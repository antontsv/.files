#!/usr/bin/env bash
# vim: ft=sh:

# This function is used to parse -h or --help when
# invoked on other functions
_help(){
 read -r -d '' HELP_MESSAGE
 if [ $# -gt 0 ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]);then
    shift;
    echo "$HELP_MESSAGE";
    return 1;
 fi;
}

# Display help if -h, --help or no parameters are given
_help_including_empty(){
    if [ $# -eq 0 ]; then
        _help -h || return 1;
    else
        _help "$@" || return 1;
    fi;
}

# Add to PATH
prepend-path() {
  _help_including_empty "$@" <<< "Usage: prepend-path /some/dir
    Prepends specified directory or file path to the PATH variable" || return 1;
  [ -d "$1" ] && PATH="$1:$PATH"
}

prepend-path-and-export() {
  _help_including_empty "$@" <<< "Usage: prepend-path-and-export /some/dir
    Prepends specified directory or file path to the PATH variable and export PATH" || return 1;
  prepend-path "$1" && export PATH
}

java-use() {
    _help_including_empty "$@" <<< "Usage: java-use java_version
        Switch between different JDKs (for available versions java-ls)" || return 1;
    JAVA_HOME=$(/usr/libexec/java_home -v "$1")
    export JAVA_HOME
    prepend-path-and-export "$JAVA_HOME/bin"
    java -version
}

# This function shows success/failure of last executed command
_last_cmd_ps1(){
    last_command_exit_status=$?
    if [ "$last_command_exit_status" -eq 0 ];
    then
        echo -en "${FG_GREEN}↑ ✔${FONT_RESET} ";
    else
        echo -en "${FG_RED}↑ ✘${FONT_RESET} ";
    fi
}

newdir(){
  _help_including_empty "$@" <<< "Usage: new dir some/new/dir
    Creates new directory and cd into it" || return 1;
    mkdir -p "$1" && cd $_
}

init-ssh-agent(){
    _help "$@" <<< "Inits SSH agent if not already running for current user"
    local launch_ssh_agent=1
    local ssh_agent_pid_file="$TMPDIR/ssh-agent-for-$(whoami).pid"
    local ssh_agent_socket="$TMPDIR/ssh-agent-socket-for-$(whoami)"
    if [ -f "$ssh_agent_pid_file" ];then
     ssh_agent_pid=$(cat "$ssh_agent_pid_file")
     kill -0 "$ssh_agent_pid" 2>/dev/null
     if [ $? -eq 0 ];then
        SSH_AGENT_PID="$ssh_agent_pid";
        export SSH_AGENT_PID;
        SSH_AUTH_SOCK="$ssh_agent_socket";
        export SSH_AUTH_SOCK;
        launch_ssh_agent=0;
     fi;
    fi;

    if [ "$launch_ssh_agent" -eq 1 ];then
        rm -f "$ssh_agent_pid_file" "$ssh_agent_socket" 2>/dev/null
        eval $(ssh-agent -t 3600 -a "$ssh_agent_socket") > /dev/null
        [ -n "$SSH_AGENT_PID" ] && echo "$SSH_AGENT_PID" > "$ssh_agent_pid_file"
    fi;

}

purge-ssh-agent-keys(){
    _help "$@" <<< "Gets rid of SSH agent keys"
    init-ssh-agent
    ssh-add -D
}

gosrc(){
    _help "$@" <<< "cd to GOPATH source dirs"
    dest="$GOPATH/src"
    case "$@" in
        mygit|git*|hub)
            [ -n "$MY_GITHUB" ] && [ -d "$dest/github.com/$MY_GITHUB" ] && \
                dest="$dest/github.com/$MY_GITHUB";
        ;;
    esac
    cd "$dest"
}

cl(){
  _help_including_empty "$@" <<< "Usage: cl some/dir
    Change to a directory and lists it" || return 1;
    cd "$1" && ls -la
}

dotfiles-clone(){
  _help_including_empty "$@" <<< "Usage: dotfiles-clone git-clone-url
    Change to a directory and lists it" || return 1;
    HOMESHICK_IGNORE="LICENSE,README.md,/.gitmodules" \
    HOMESHICK_USE_CASTLE_ROOT=true \
    HOMESHICK_CLONE_BRANCH="${DOT_FILES_BRANCH:-master}" \
    homeshick clone --batch "$@"
}

whichdir(){
  _help_including_empty "$@" <<< "Usage: whichdir [-asc] utility
    Same as which, but shows you directories, containing utility
    Options:
    -a show all locations
    -s silent, return success if utility is found
    -c cd into first directory found 
    " || return 1;
    args=""
    while test ${#} -gt 0; do
       if [[ "$1" == -* ]];then
           args="$args $1"
       else
           break;
       fi;
       shift
    done
    [[ "$args" == *s* ]] && return $(command -v "$*" > /dev/null)
    if [[ "$args" == *c* ]];then
        path=$(command -v "$*") || return 1
        cd $(dirname "$path") || return 1
    else
        paths=$(which $args "$*") || return 1
        echo $paths | xargs -n1 dirname
    fi;
}

get-antontsv-sigcheck-tool(){
    _help "$@" <<< "Usage: get-antontsv-sigcheck-tool
    Downloads utility for PGP signature verifications on commits" || return 1;
    OS=$(uname -s)
    hashsum="expected hash sum will be here"
    shasum_cmd="echo 'command for sha 256 will be set here'"
    sig_check="$HOME/bin/verify-commit"

    if [ -x "$sig_check" ];then
        # tool was previosly downloaded and verified
        echo "$sig_check"
        return
    fi;

    if [ "$OS" = "Darwin" ]; then
        #  Mac OS
        shasum_cmd="/usr/bin/shasum -a 256"
        curl -Ls -o "$sig_check" "https://antontsv.keybase.pub/macos-verify-commit?dl=1"
        hashsum="93407ec562db389413a01f24dc71d391259545b9ef561c37933702f7121f1eb9"
    else
        shasum_cmd="/usr/bin/sha256sum"
        curl -Ls -o "$sig_check" "https://antontsv.keybase.pub/verify-commit?dl=1"
        hashsum="34d39967b2fbc4c8a81d28236556dff5f8f23d8e3d25431eb7d8de0a6da6c494"
    fi;

    if [ "$($shasum_cmd "$sig_check" | cut -d ' ' -f1 )" != "$hashsum" ];then
        rm -rf "$sig_check"
        echo "Downloaded tool for PGP verification does not have expected sha256."
        return 1
    fi;

    chmod u+x "$sig_check"
    echo "$sig_check"
}

is-commited-by-antontsv(){
  _help_including_empty "$@" <<< "Usage: is-commited-by-antontsv path_to_git_checkout
    Verifies that commit was indeed created by github's @antontsv by verifying commit signature" || return 1;
    tool="$(get-antontsv-sigcheck-tool)" && [ -d "$1" ]  && "$tool" sigcheck -p "$1"
}

install-awesome-bash(){
  _help "$@" <<< "Usage: install-awesome-bash
    Installs https://github.com/antontsv/awesome-shell" || return 1;

    if [ -d "$HOME/bin/awesome-shell" ] || git clone "https://github.com/antontsv/awesome-shell.git" "$HOME/bin/awesome-shell";then
        echo "Awesome-shell source is checked out at $HOME/bin/awesome-shell"
    fi;

    if ! (is-commited-by-antontsv "$HOME/bin/awesome-shell" && "$HOME/bin/awesome-shell/INSTALL");then
        echo "Unable to install awesome-bash at this time"
        return 1;
    fi;

    if [ -d "$HOME/.sh" ] && [ ! -f "$HOME/.sh/completion_awesome_bash.extra" ];then
        ln -s "$HOME/bin/awesome-shell/completion.d/completion-awesome-bash" "$HOME/.sh/completion_awesome_bash.extra"
    fi;
}


