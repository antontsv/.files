
# This function is used to parse -h or --help when
# invoked on other functions
_help(){
 read -r -d '' HELP_MESSAGE
 if [ $# -gt 0 ] && ([ "$1" = "-h" ] || [ "$1" = "--help" ]);then
    shift;
    echo "$HELP_MESSAGE";
    return 1;
 fi;
}

# Display help if -h, --help or no parameters are given
_help_including_empty(){
    if [ $# -eq 0 ]; then
        _help -h || return 1;
    else
        _help "$@" || return 1;
    fi;
}

# Add to PATH
prepend-path() {
  _help_including_empty "$@" <<< "Usage: prepend-path /some/dir
    Prepends specified directory or file path to the PATH variable" || return 1;
  [ -d "$1" ] && PATH="$1:$PATH"
}

prepend-path-and-export() {
  _help_including_empty "$@" <<< "Usage: prepend-path-and-export /some/dir
    Prepends specified directory or file path to the PATH variable and export PATH" || return 1;
  prepend-path "$1" && export PATH
}

java-use() {
    _help_including_empty "$@" <<< "Usage: java-use java_version
        Switch between different JDKs (for available versions java-ls)" || return 1;
    JAVA_HOME=$(/usr/libexec/java_home -v "$1")
    export JAVA_HOME
    prepend-path-and-export "$JAVA_HOME/bin"
    java -version
}

# This function shows success/failure of last executed command
_last_cmd_ps1(){
    last_command_exit_status=$?
    if [ "$last_command_exit_status" -eq 0 ];
    then
        echo -en "${FG_GREEN}↑ ✔${FONT_RESET} ";
    else
        echo -en "${FG_RED}↑ ✘${FONT_RESET} ";
    fi
}

newdir(){
  _help_including_empty "$@" <<< "Usage: new dir some/new/dir
    Creates new directory and cd into it" || return 1;
    mkdir -p "$1" && cd $_
}

init-ssh-agent(){
    _help "$@" <<< "Inits SSH agent if not already running for current user"
    local launch_ssh_agent=1
    local ssh_agent_pid_file="$TMPDIR/ssh-agent-for-$(whoami).pid"
    local ssh_agent_socket="$TMPDIR/ssh-agent-socket-for-$(whoami)"
    if [ -f "$ssh_agent_pid_file" ];then
     ssh_agent_pid=$(cat "$ssh_agent_pid_file")
     kill -0 "$ssh_agent_pid" 2>/dev/null
     if [ $? -eq 0 ];then
        SSH_AGENT_PID="$ssh_agent_pid";
        export SSH_AGENT_PID;
        SSH_AUTH_SOCK="$ssh_agent_socket";
        export SSH_AUTH_SOCK;
        launch_ssh_agent=0;
     fi;
    fi;

    if [ "$launch_ssh_agent" -eq 1 ];then
        rm -f "$ssh_agent_pid_file" "$ssh_agent_socket" 2>/dev/null
        eval $(ssh-agent -t 3600 -a "$ssh_agent_socket") > /dev/null
        [ -n "$SSH_AGENT_PID" ] && echo "$SSH_AGENT_PID" > "$ssh_agent_pid_file"
    fi;

}

purge-ssh-agent-keys(){
    _help "$@" <<< "Gets rid of SSH agent keys"
    init-ssh-agent
    ssh-add -D
}

gosrc(){
    _help "$@" <<< "cd to GOPATH source dirs"
    dest="$GOPATH/src"
    case "$@" in
        mygit|git*|hub)
            [ -n "$MY_GITHUB" ] && [ -d "$dest/github.com/$MY_GITHUB" ] && \
                dest="$dest/github.com/$MY_GITHUB";
        ;;
    esac
    cd "$dest"
}

cl(){
  _help_including_empty "$@" <<< "Usage: cl some/dir
    Change to a directory and lists it" || return 1;
    cd "$1" && ls -la
}
